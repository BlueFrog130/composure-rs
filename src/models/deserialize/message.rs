use core::str;

use serde::{Deserialize, Serialize};
use serde_repr::Deserialize_repr;

use crate::models::{
    Application, Attachment, Channel, Component, Embed, Emoji, Interaction, Role,
    RoleSubscriptionData, Snowflake, StickerItem, User,
};

/// [Message Structure](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-object-message-structure)
#[derive(Debug, Deserialize)]
pub struct Message {
    /// id of the message
    pub id: Snowflake,

    /// id of the channel the message was sent in
    pub channel_id: Snowflake,

    /// the author of this message (not guaranteed to be a valid user, see below)
    pub author: User,

    /// contents of the message
    pub content: String,

    /// when this message was sent
    pub timestamp: String,

    /// when this message was edited (or null if never)
    pub edited_timestamp: Option<String>,

    /// whether this was a TTS message
    pub tts: bool,

    /// whether this message mentions everyone
    pub mention_everyone: bool,

    /// users specifically mentioned in the message
    pub mentions: Vec<User>,

    /// roles specifically mentioned in this message
    pub mention_roles: Vec<Role>,

    /// channels specifically mentioned in this message
    pub mention_channels: Option<Vec<ChannelMention>>,

    /// any attached files
    pub attachments: Vec<Attachment>,

    /// any embedded content
    pub embeds: Vec<Embed>,

    /// reactions to the message
    pub reactions: Option<Vec<Reaction>>,

    // /// used for validating a message was sent
    // pub nonce: Option<todo>,
    /// whether this message is pinned
    pub pinned: bool,

    /// if the message is generated by a webhook, this is the webhook's id
    pub webhook_id: Option<Snowflake>,

    /// [type of message](https://discord.com/developers/docs/resources/channel#message-object-message-types)
    #[serde(rename = "type")]
    pub t: MessageType,

    /// sent with Rich Presence-related chat embeds
    pub activity: Option<MessageActivity>,

    /// sent with Rich Presence-related chat embeds
    pub application: Option<Application>,

    /// if the message is an [Interaction](https://discord.com/developers/docs/interactions/receiving-and-responding) or application-owned webhook, this is the id of the application
    pub application_id: Option<Snowflake>,

    /// data showing the source of a crosspost, channel follow add, pin, or reply message
    pub message_reference: Option<MessageReference>,

    /// [message flags](https://discord.com/developers/docs/resources/channel#message-object-message-flags) combined as a [bitfield](https://en.wikipedia.org/wiki/Bit_field)
    pub flags: Option<u32>,

    // /// the message associated with the message_reference
    // pub referenced_message: Option<Message>,
    /// sent if the message is a response to an [Interaction](https://discord.com/developers/docs/interactions/receiving-and-responding)
    pub interaction: Option<Interaction>,

    /// the thread that was started from this message, includes [thread member](https://discord.com/developers/docs/resources/channel#thread-member-object) object
    pub thread: Option<Channel>,

    /// sent if the message contains components like buttons, action rows, or other interactive components
    pub components: Option<Vec<Component>>,

    /// sent if the message contains stickers
    pub sticker_items: Option<Vec<StickerItem>>,

    /// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
    pub position: Option<i32>,

    /// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
    pub role_subscription_data: Option<RoleSubscriptionData>,
}
/// [Channel Mention Object](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#channel-mention-object)
#[derive(Debug, Deserialize)]
pub struct ChannelMention {
    /// id of the channel
    pub id: Snowflake,

    /// id of the guild containing the channel
    pub guild_id: Snowflake,

    /// the [type of channel](https://discord.com/developers/docs/resources/channel#channel-object-channel-types)
    #[serde(rename = "type")]
    pub t: i32,

    /// the name of the channel
    pub name: String,
}

/// [Reaction Object](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#reaction-object)
#[derive(Debug, Deserialize)]
pub struct Reaction {
    /// times this emoji has been used to react
    pub count: i32,

    /// whether the current user reacted using this emoji
    pub me: bool,

    /// emoji information
    pub emoji: Emoji,
}

/// [Message Types](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-object-message-types)
#[derive(Debug, Deserialize_repr)]
#[repr(u8)]
pub enum MessageType {
    /// true
    Default = 0,

    /// false
    RecipientAdd = 1,

    /// false
    RecipientRemove = 2,

    /// false
    Call = 3,

    /// false
    ChannelNameChange = 4,

    /// false
    ChannelIconChange = 5,

    /// true
    ChannelPinnedMessage = 6,

    /// true
    UserJoin = 7,

    /// true
    GuildBoost = 8,

    /// true
    GuildBoostTier1 = 9,

    /// true
    GuildBoostTier2 = 10,

    /// true
    GuildBoostTier3 = 11,

    /// true
    ChannelFollowAdd = 12,

    /// false
    GuildDiscoveryDisqualified = 14,

    /// false
    GuildDiscoveryRequalified = 15,

    /// false
    GuildDiscoveryGracePeriodInitialWarning = 16,

    /// false
    GuildDiscoveryGracePeriodFinalWarning = 17,

    /// true
    ThreadCreated = 18,

    /// true
    Reply = 19,

    /// true
    ChatInputCommand = 20,

    /// false
    ThreadStarterMessage = 21,

    /// true
    GuildInviteReminder = 22,

    /// true
    ContextMenuCommand = 23,

    /// true*
    AutoModerationAction = 24,

    /// true
    RoleSubscriptionPurchase = 25,

    /// true
    InteractionPremiumUpsell = 26,

    /// true
    StageStart = 27,

    /// true
    StageEnd = 28,

    /// true
    StageSpeaker = 29,

    /// true
    StageTopic = 31,

    /// false
    GuildApplicationPremiumSubscription = 32,
}

/// [Message Activity Structure](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-object-message-activity-structure)
#[derive(Debug, Deserialize)]
pub struct MessageActivity {
    /// [type of message activity](https://discord.com/developers/docs/resources/channel#message-object-message-activity-types)
    #[serde(rename = "type")]
    pub t: MessageActivityType,

    /// party_id from a [Rich Presence event](https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields)
    pub party_id: Option<String>,
}

/// [Message Activity Types](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-object-message-activity-types)
#[derive(Debug, Deserialize_repr)]
#[repr(u8)]
pub enum MessageActivityType {
    Join = 1,

    Spectate = 2,

    Listen = 3,

    JoinRequest = 5,
}

bitflags::bitflags! {
    /// [Message Flags](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-object-message-flags)
    #[derive(Debug)]
    pub struct MessageFlags: u16 {
        /// this message has been published to subscribed channels (via Channel Following)
        const Crossposted = 1 << 0;

        /// this message originated from a message in another channel (via Channel Following)
        const IsCrosspost = 1 << 1;

        /// do not include any embeds when serializing this message
        const SuppressEmbeds = 1 << 2;

        /// the source message for this crosspost has been deleted (via Channel Following)
        const SourceMessageDeleted = 1 << 3;

        /// this message came from the urgent message system
        const Urgent = 1 << 4;

        /// this message has an associated thread, with the same id as the message
        const HasThread = 1 << 5;

        /// this message is only visible to the user who invoked the Interaction
        const Ephemeral = 1 << 6;

        /// this message is an Interaction Response and the bot is "thinking"
        const Loading = 1 << 7;

        /// this message failed to mention some roles and add their members to the thread
        const FailedToMentionSomeRolesInThread = 1 << 8;

        /// this message will not trigger push and desktop notifications
        const SuppressNotifications = 1 << 12;

        /// this message is a voice message
        const IsVoiceMessage = 1 << 13;
    }
}

impl Serialize for MessageFlags {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        self.bits().to_string().serialize(serializer)
    }
}

impl<'de> Deserialize<'de> for MessageFlags {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let bit_str = String::deserialize(deserializer)?;
        let bits = bit_str
            .parse::<u16>()
            .map_err(|e| serde::de::Error::custom(e))?;

        // Permissions::from_bits(bits).ok_or(serde::de::Error::custom("Unexpected permissions flags"))
        Ok(MessageFlags::from_bits_retain(bits))
    }
}

/// [Message Reference Structure](https://discord.comundefinedhttps://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure)
#[derive(Debug, Deserialize)]
pub struct MessageReference {
    /// id of the originating message
    pub message_id: Option<Snowflake>,

    /// id of the originating message's channel
    pub channel_id: Option<Snowflake>,

    /// id of the originating message's guild
    pub guild_id: Option<Snowflake>,

    /// when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
    pub fail_if_not_exists: Option<bool>,
}

#[cfg(test)]
pub mod tests {
    use super::*;

    #[test]
    pub fn button_component() {
        let json = r#"{
            "type": 1,
            "components": [
                {
                    "type": 2,
                    "label": "Click me!",
                    "style": 1,
                    "custom_id": "click_one"
                }
            ]
        }"#;

        let res = serde_json::from_str::<Component>(json);

        assert!(res.is_ok());

        let component = res.unwrap();

        assert!(matches!(component, Component::ActionRow { .. }));

        match component {
            Component::ActionRow(action_row) => {
                assert_eq!(action_row.components.len(), 1);
                assert!(matches!(action_row.components[0], Component::Button { .. }));
            }
            _ => assert!(false),
        }
    }

    #[test]
    pub fn select_menu_component() {
        let json = r#" {
            "type": 1,
            "components": [
                {
                    "type": 3,
                    "custom_id": "class_select_1",
                    "options":[
                        {
                            "label": "Rogue",
                            "value": "rogue",
                            "description": "Sneak n stab",
                            "emoji": {
                                "name": "rogue",
                                "id": "625891304148303894"
                            }
                        },
                        {
                            "label": "Mage",
                            "value": "mage",
                            "description": "Turn 'em into a sheep",
                            "emoji": {
                                "name": "mage",
                                "id": "625891304081063986"
                            }
                        },
                        {
                            "label": "Priest",
                            "value": "priest",
                            "description": "You get heals when I'm done doing damage",
                            "emoji": {
                                "name": "priest",
                                "id": "625891303795982337"
                            }
                        }
                    ],
                    "placeholder": "Choose a class",
                    "min_values": 1,
                    "max_values": 3
                }
            ]
        }"#;

        let res = serde_json::from_str::<Component>(json);

        assert!(res.is_ok());

        let component = res.unwrap();

        println!("{:#?}", component);
    }
}
